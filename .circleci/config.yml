# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: coach_royale
          POSTGRES_DB: test_coach_royale

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            ls -lah .
            mv ~/repo/coach_royale/settings.example.py ~/repo/coach_royale/settings.py
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports

  # Build the front-end
  build-front:
    docker:
      - image: circleci/node:4.8.2-jessie
    working_directory: ~/repo/front
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'

      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}

      - run:
          name: Install npm dependencies
          command: npm install

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
        name: Build Reactjs
        command: npm run build
